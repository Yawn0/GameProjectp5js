/* Blobby pose renderers (no logic side-effects) */
import { BLOBBY, state } from './constants.js';

/** Idle / neutral pose */
export function blobbyStandingFront() {
    const gameChar = state.gameChar;
    // Joyful idle wobble (horizontal sway + slight lean) while standing
    const t = frameCount * 0.08; // phase speed
    const sway = sin(t) * 3; // horizontal offset
    const lean = sin(t + PI / 2) * 0.08; // small rotation
    stroke(0);
    fill(BLOBBY.COLORS.FEET);
    const footSway = -sway * 0.25;
    ellipse(gameChar.x - BLOBBY.DIMENSIONS.BODY_WIDTH * 0.25 + footSway, gameChar.y - BLOBBY.DIMENSIONS.FEET_HEIGHT / 2, BLOBBY.DIMENSIONS.FEET_WIDTH, BLOBBY.DIMENSIONS.FEET_HEIGHT);
    ellipse(gameChar.x + BLOBBY.DIMENSIONS.BODY_WIDTH * 0.25 + footSway, gameChar.y - BLOBBY.DIMENSIONS.FEET_HEIGHT / 2, BLOBBY.DIMENSIONS.FEET_WIDTH, BLOBBY.DIMENSIONS.FEET_HEIGHT);
    push();
    translate(gameChar.x + sway, gameChar.y - BLOBBY.DIMENSIONS.BODY_HEIGHT / 2 - BLOBBY.DIMENSIONS.FEET_HEIGHT / 2);
    rotate(lean);
    fill(BLOBBY.COLORS.BODY);
    ellipse(0, 0, BLOBBY.DIMENSIONS.BODY_WIDTH, BLOBBY.DIMENSIONS.BODY_HEIGHT);
    fill(BLOBBY.COLORS.ARM);
    rect(-BLOBBY.DIMENSIONS.BODY_WIDTH / 2, BLOBBY.DIMENSIONS.BODY_HEIGHT * 0.1, BLOBBY.DIMENSIONS.ARM_WIDTH, BLOBBY.DIMENSIONS.ARM_LENGTH, 5);
    rect(BLOBBY.DIMENSIONS.BODY_WIDTH / 2 - BLOBBY.DIMENSIONS.ARM_WIDTH, BLOBBY.DIMENSIONS.BODY_HEIGHT * 0.1, BLOBBY.DIMENSIONS.ARM_WIDTH, BLOBBY.DIMENSIONS.ARM_LENGTH, 5);
    noStroke();
    fill(BLOBBY.COLORS.EYE);
    ellipse(-BLOBBY.DIMENSIONS.BODY_WIDTH * 0.2, -BLOBBY.DIMENSIONS.BODY_HEIGHT * 0.1, BLOBBY.DIMENSIONS.EYE_SIZE, BLOBBY.DIMENSIONS.EYE_SIZE);
    ellipse(BLOBBY.DIMENSIONS.BODY_WIDTH * 0.2, -BLOBBY.DIMENSIONS.BODY_HEIGHT * 0.1, BLOBBY.DIMENSIONS.EYE_SIZE, BLOBBY.DIMENSIONS.EYE_SIZE);
    fill(BLOBBY.COLORS.PUPIL);
    // Pupils add a tiny opposite sway
    ellipse(-BLOBBY.DIMENSIONS.BODY_WIDTH * 0.2 - sway * 0.05, -BLOBBY.DIMENSIONS.BODY_HEIGHT * 0.1, BLOBBY.DIMENSIONS.PUPIL_SIZE, BLOBBY.DIMENSIONS.PUPIL_SIZE);
    ellipse(BLOBBY.DIMENSIONS.BODY_WIDTH * 0.2 - sway * 0.05, -BLOBBY.DIMENSIONS.BODY_HEIGHT * 0.1, BLOBBY.DIMENSIONS.PUPIL_SIZE, BLOBBY.DIMENSIONS.PUPIL_SIZE);
    stroke(BLOBBY.COLORS.PUPIL);
    noFill();
    arc(-BLOBBY.DIMENSIONS.BODY_WIDTH * 0.2, -BLOBBY.DIMENSIONS.BODY_HEIGHT * 0.15, BLOBBY.DIMENSIONS.PUPIL_SIZE * 2, BLOBBY.DIMENSIONS.PUPIL_SIZE * 2, BLOBBY.EYEBROW_START, BLOBBY.EYEBROW_STOP);
    arc(BLOBBY.DIMENSIONS.BODY_WIDTH * 0.2, -BLOBBY.DIMENSIONS.BODY_HEIGHT * 0.15, BLOBBY.DIMENSIONS.PUPIL_SIZE * 2, BLOBBY.DIMENSIONS.PUPIL_SIZE * 2, BLOBBY.EYEBROW_START, BLOBBY.EYEBROW_STOP);
    stroke(BLOBBY.COLORS.MOUTH);
    noFill();
    arc(0, BLOBBY.DIMENSIONS.BODY_HEIGHT * 0.15, 10, 5, 0, PI);
    pop();
}

/** Vertical jump / airborne idle */
export function blobbyJumping() {
    const gameChar = state.gameChar;
    stroke(0);
    fill(BLOBBY.COLORS.FEET);
    ellipse(gameChar.x - BLOBBY.DIMENSIONS.BODY_WIDTH * 0.15, gameChar.y - BLOBBY.DIMENSIONS.FEET_HEIGHT / 2 + 5, BLOBBY.DIMENSIONS.FEET_WIDTH * 0.8, BLOBBY.DIMENSIONS.FEET_HEIGHT * 0.8);
    ellipse(gameChar.x + BLOBBY.DIMENSIONS.BODY_WIDTH * 0.15, gameChar.y - BLOBBY.DIMENSIONS.FEET_HEIGHT / 2 + 5, BLOBBY.DIMENSIONS.FEET_WIDTH * 0.8, BLOBBY.DIMENSIONS.FEET_HEIGHT * 0.8);
    fill(BLOBBY.COLORS.BODY);
    ellipse(gameChar.x, gameChar.y - BLOBBY.DIMENSIONS.BODY_HEIGHT / 2 - BLOBBY.DIMENSIONS.FEET_HEIGHT / 2, BLOBBY.DIMENSIONS.BODY_WIDTH, BLOBBY.DIMENSIONS.BODY_HEIGHT * 1.1);
    fill(BLOBBY.COLORS.ARM);
    rect(gameChar.x - BLOBBY.DIMENSIONS.BODY_WIDTH / 2 + 2, gameChar.y - BLOBBY.DIMENSIONS.BODY_HEIGHT * 0.5 - BLOBBY.DIMENSIONS.ARM_LENGTH * 0.5, BLOBBY.DIMENSIONS.ARM_WIDTH, BLOBBY.DIMENSIONS.ARM_LENGTH, 5);
    rect(gameChar.x + BLOBBY.DIMENSIONS.BODY_WIDTH / 2 - BLOBBY.DIMENSIONS.ARM_WIDTH - 2, gameChar.y - BLOBBY.DIMENSIONS.BODY_HEIGHT * 0.5 - BLOBBY.DIMENSIONS.ARM_LENGTH * 0.5, BLOBBY.DIMENSIONS.ARM_WIDTH, BLOBBY.DIMENSIONS.ARM_LENGTH, 5);
    noStroke();
    fill(BLOBBY.COLORS.EYE);
    ellipse(gameChar.x - BLOBBY.DIMENSIONS.BODY_WIDTH * 0.2, gameChar.y - BLOBBY.DIMENSIONS.BODY_HEIGHT * 0.6, BLOBBY.DIMENSIONS.EYE_SIZE * 1.2, BLOBBY.DIMENSIONS.EYE_SIZE * 1.2);
    ellipse(gameChar.x + BLOBBY.DIMENSIONS.BODY_WIDTH * 0.2, gameChar.y - BLOBBY.DIMENSIONS.BODY_HEIGHT * 0.6, BLOBBY.DIMENSIONS.EYE_SIZE * 1.2, BLOBBY.DIMENSIONS.EYE_SIZE * 1.2);
    fill(BLOBBY.COLORS.PUPIL);
    ellipse(gameChar.x - BLOBBY.DIMENSIONS.BODY_WIDTH * 0.2, gameChar.y - BLOBBY.DIMENSIONS.BODY_HEIGHT * 0.6, BLOBBY.DIMENSIONS.PUPIL_SIZE, BLOBBY.DIMENSIONS.PUPIL_SIZE);
    ellipse(gameChar.x + BLOBBY.DIMENSIONS.BODY_WIDTH * 0.2, gameChar.y - BLOBBY.DIMENSIONS.BODY_HEIGHT * 0.6, BLOBBY.DIMENSIONS.PUPIL_SIZE, BLOBBY.DIMENSIONS.PUPIL_SIZE);
    stroke(BLOBBY.COLORS.PUPIL);
    noFill();
    arc(gameChar.x - BLOBBY.DIMENSIONS.BODY_WIDTH * 0.2, gameChar.y - BLOBBY.DIMENSIONS.BODY_HEIGHT * 0.7, BLOBBY.DIMENSIONS.PUPIL_SIZE * 2, BLOBBY.DIMENSIONS.PUPIL_SIZE * 2, BLOBBY.EYEBROW_START, BLOBBY.EYEBROW_STOP);
    arc(gameChar.x + BLOBBY.DIMENSIONS.BODY_WIDTH * 0.2, gameChar.y - BLOBBY.DIMENSIONS.BODY_HEIGHT * 0.7, BLOBBY.DIMENSIONS.PUPIL_SIZE * 2, BLOBBY.DIMENSIONS.PUPIL_SIZE * 2, BLOBBY.EYEBROW_START, BLOBBY.EYEBROW_STOP);
    noStroke();
    fill(BLOBBY.COLORS.MOUTH);
    ellipse(gameChar.x, gameChar.y - BLOBBY.DIMENSIONS.BODY_HEIGHT * 0.35, 8, 8);
}

/** Walk cycle facing left */
export function blobbyWalkingLeft() {
    const gameChar = state.gameChar;
    const phase = gameChar.walkCycle;
    const stride = sin(phase);
    const liftLead = max(0, stride) * 6; // leading foot lift
    const liftRear = max(0, -stride) * 3; // trailing foot mild lift
    const bodyBob = sin(phase * 2) * 2; // vertical bob
    const contact = max(0, -sin(phase * 2)); // contact compression factor
    const squashY = 1 - contact * 0.08;
    const squashX = 1 + contact * 0.05;
    const lean = -stride * 0.08; // lean into motion
    const armSwing = sin(phase) * 0.5;
    stroke(0);
    fill(BLOBBY.COLORS.FEET);
    // Rear foot first (depth)
    ellipse(gameChar.x - BLOBBY.DIMENSIONS.BODY_WIDTH * 0.1 + 3, gameChar.y - BLOBBY.DIMENSIONS.FEET_HEIGHT / 2 - liftRear, BLOBBY.DIMENSIONS.FEET_WIDTH, BLOBBY.DIMENSIONS.FEET_HEIGHT);
    // Leading foot
    ellipse(gameChar.x - BLOBBY.DIMENSIONS.BODY_WIDTH * 0.25 + 3, gameChar.y - BLOBBY.DIMENSIONS.FEET_HEIGHT / 2 - liftLead, BLOBBY.DIMENSIONS.FEET_WIDTH * 1.1, BLOBBY.DIMENSIONS.FEET_HEIGHT);
    push();
    translate(gameChar.x, gameChar.y - BLOBBY.DIMENSIONS.BODY_HEIGHT / 2 - BLOBBY.DIMENSIONS.FEET_HEIGHT / 2 - bodyBob);
    rotate(lean);
    scale(squashX, squashY);
    fill(BLOBBY.COLORS.BODY);
    ellipse(0, 0, BLOBBY.DIMENSIONS.BODY_WIDTH, BLOBBY.DIMENSIONS.BODY_HEIGHT);
    // Arm swing (single visible arm)
    push();
    translate(-BLOBBY.DIMENSIONS.BODY_WIDTH / 2 + 18, -BLOBBY.DIMENSIONS.BODY_HEIGHT * 0.05);
    rotate(armSwing);
    fill(BLOBBY.COLORS.ARM);
    rect(-BLOBBY.DIMENSIONS.ARM_WIDTH / 2, 0, BLOBBY.DIMENSIONS.ARM_WIDTH, BLOBBY.DIMENSIONS.ARM_LENGTH, 5);
    pop();
    noStroke();
    fill(BLOBBY.COLORS.EYE);
    ellipse(-BLOBBY.DIMENSIONS.BODY_WIDTH * 0.25, -BLOBBY.DIMENSIONS.BODY_HEIGHT * 0.1, BLOBBY.DIMENSIONS.EYE_SIZE, BLOBBY.DIMENSIONS.EYE_SIZE);
    fill(BLOBBY.COLORS.PUPIL);
    ellipse(-BLOBBY.DIMENSIONS.BODY_WIDTH * 0.25 - 1 - stride * 0.5, -BLOBBY.DIMENSIONS.BODY_HEIGHT * 0.1, BLOBBY.DIMENSIONS.PUPIL_SIZE, BLOBBY.DIMENSIONS.PUPIL_SIZE);
    stroke(BLOBBY.COLORS.PUPIL);
    noFill();
    arc(-BLOBBY.DIMENSIONS.BODY_WIDTH * 0.25, -BLOBBY.DIMENSIONS.BODY_HEIGHT * 0.15, BLOBBY.DIMENSIONS.PUPIL_SIZE * 2, BLOBBY.DIMENSIONS.PUPIL_SIZE * 2, BLOBBY.EYEBROW_START, BLOBBY.EYEBROW_STOP);
    stroke(BLOBBY.COLORS.MOUTH);
    line(-BLOBBY.DIMENSIONS.BODY_WIDTH * 0.3, BLOBBY.DIMENSIONS.BODY_HEIGHT * 0.15, -BLOBBY.DIMENSIONS.BODY_WIDTH * 0.1, BLOBBY.DIMENSIONS.BODY_HEIGHT * 0.15);
    pop();
}

/** Walk cycle facing right */
export function blobbyWalkingRight() {
    const gameChar = state.gameChar;
    const phase = gameChar.walkCycle;
    const stride = sin(phase);
    const liftLead = max(0, stride) * 6;
    const liftRear = max(0, -stride) * 3;
    const bodyBob = sin(phase * 2) * 2;
    const contact = max(0, -sin(phase * 2));
    const squashY = 1 - contact * 0.08;
    const squashX = 1 + contact * 0.05;
    const lean = stride * 0.08;
    const armSwing = sin(phase) * 0.5;
    stroke(0);
    fill(BLOBBY.COLORS.FEET);
    ellipse(gameChar.x + BLOBBY.DIMENSIONS.BODY_WIDTH * 0.1 - 3, gameChar.y - BLOBBY.DIMENSIONS.FEET_HEIGHT / 2 - liftRear, BLOBBY.DIMENSIONS.FEET_WIDTH, BLOBBY.DIMENSIONS.FEET_HEIGHT);
    ellipse(gameChar.x + BLOBBY.DIMENSIONS.BODY_WIDTH * 0.25 - 3, gameChar.y - BLOBBY.DIMENSIONS.FEET_HEIGHT / 2 - liftLead, BLOBBY.DIMENSIONS.FEET_WIDTH * 1.1, BLOBBY.DIMENSIONS.FEET_HEIGHT);
    push();
    translate(gameChar.x, gameChar.y - BLOBBY.DIMENSIONS.BODY_HEIGHT / 2 - BLOBBY.DIMENSIONS.FEET_HEIGHT / 2 - bodyBob);
    rotate(lean);
    scale(squashX, squashY);
    fill(BLOBBY.COLORS.BODY);
    ellipse(0, 0, BLOBBY.DIMENSIONS.BODY_WIDTH, BLOBBY.DIMENSIONS.BODY_HEIGHT);
    push();
    translate(BLOBBY.DIMENSIONS.BODY_WIDTH / 2 - 18, -BLOBBY.DIMENSIONS.BODY_HEIGHT * 0.05);
    rotate(-armSwing);
    fill(BLOBBY.COLORS.ARM);
    rect(-BLOBBY.DIMENSIONS.ARM_WIDTH / 2, 0, BLOBBY.DIMENSIONS.ARM_WIDTH, BLOBBY.DIMENSIONS.ARM_LENGTH, 5);
    pop();
    noStroke();
    fill(BLOBBY.COLORS.EYE);
    ellipse(BLOBBY.DIMENSIONS.BODY_WIDTH * 0.25, -BLOBBY.DIMENSIONS.BODY_HEIGHT * 0.1, BLOBBY.DIMENSIONS.EYE_SIZE, BLOBBY.DIMENSIONS.EYE_SIZE);
    fill(BLOBBY.COLORS.PUPIL);
    ellipse(BLOBBY.DIMENSIONS.BODY_WIDTH * 0.25 + 1 + stride * 0.5, -BLOBBY.DIMENSIONS.BODY_HEIGHT * 0.1, BLOBBY.DIMENSIONS.PUPIL_SIZE, BLOBBY.DIMENSIONS.PUPIL_SIZE);
    stroke(BLOBBY.COLORS.PUPIL);
    noFill();
    arc(BLOBBY.DIMENSIONS.BODY_WIDTH * 0.25, -BLOBBY.DIMENSIONS.BODY_HEIGHT * 0.15, BLOBBY.DIMENSIONS.PUPIL_SIZE * 2, BLOBBY.DIMENSIONS.PUPIL_SIZE * 2, BLOBBY.EYEBROW_START, BLOBBY.EYEBROW_STOP);
    stroke(BLOBBY.COLORS.MOUTH);
    line(BLOBBY.DIMENSIONS.BODY_WIDTH * 0.1, BLOBBY.DIMENSIONS.BODY_HEIGHT * 0.15, BLOBBY.DIMENSIONS.BODY_WIDTH * 0.3, BLOBBY.DIMENSIONS.BODY_HEIGHT * 0.15);
    pop();
}

/** Airborne with leftward momentum */
export function blobbyJumpingLeft() {
    const gameChar = state.gameChar;
    stroke(0);
    fill(BLOBBY.COLORS.FEET);
    ellipse(gameChar.x + BLOBBY.DIMENSIONS.BODY_WIDTH * 0.1, gameChar.y - BLOBBY.DIMENSIONS.FEET_HEIGHT / 2 + 5, BLOBBY.DIMENSIONS.FEET_WIDTH * 0.9, BLOBBY.DIMENSIONS.FEET_HEIGHT * 0.9);
    push();
    translate(gameChar.x, gameChar.y - BLOBBY.DIMENSIONS.BODY_HEIGHT / 2 - BLOBBY.DIMENSIONS.FEET_HEIGHT / 2);
    rotate(-PI / 12.0);
    fill(BLOBBY.COLORS.BODY);
    ellipse(0, 0, BLOBBY.DIMENSIONS.BODY_WIDTH, BLOBBY.DIMENSIONS.BODY_HEIGHT * 1.05);
    fill(BLOBBY.COLORS.ARM);
    rect(BLOBBY.DIMENSIONS.BODY_WIDTH * 0.2 - BLOBBY.DIMENSIONS.ARM_LENGTH * 1.2, -BLOBBY.DIMENSIONS.BODY_HEIGHT * 0.1 + 10, BLOBBY.DIMENSIONS.ARM_LENGTH * 1.2, BLOBBY.DIMENSIONS.ARM_WIDTH, 5);
    noStroke();
    fill(BLOBBY.COLORS.EYE);
    ellipse(-BLOBBY.DIMENSIONS.BODY_WIDTH * 0.25, -BLOBBY.DIMENSIONS.BODY_HEIGHT * 0.1, BLOBBY.DIMENSIONS.EYE_SIZE * 1.1, BLOBBY.DIMENSIONS.EYE_SIZE * 1.1);
    fill(BLOBBY.COLORS.PUPIL);
    ellipse(-BLOBBY.DIMENSIONS.BODY_WIDTH * 0.25 - 1, -BLOBBY.DIMENSIONS.BODY_HEIGHT * 0.1, BLOBBY.DIMENSIONS.PUPIL_SIZE, BLOBBY.DIMENSIONS.PUPIL_SIZE);
    stroke(BLOBBY.COLORS.PUPIL);
    noFill();
    arc(-BLOBBY.DIMENSIONS.BODY_WIDTH * 0.25, -BLOBBY.DIMENSIONS.BODY_HEIGHT * 0.2, BLOBBY.DIMENSIONS.PUPIL_SIZE * 2, BLOBBY.DIMENSIONS.PUPIL_SIZE * 2, BLOBBY.EYEBROW_START, BLOBBY.EYEBROW_STOP);
    noStroke();
    fill(BLOBBY.COLORS.MOUTH);
    ellipse(-BLOBBY.DIMENSIONS.BODY_WIDTH * 0.4, BLOBBY.DIMENSIONS.BODY_HEIGHT * 0.2, 6, 6);
    pop();
}

/** Airborne with rightward momentum */
export function blobbyJumpingRight() {
    const gameChar = state.gameChar;
    stroke(0);
    fill(BLOBBY.COLORS.FEET);
    ellipse(gameChar.x - BLOBBY.DIMENSIONS.BODY_WIDTH * 0.1, gameChar.y - BLOBBY.DIMENSIONS.FEET_HEIGHT / 2 + 5, BLOBBY.DIMENSIONS.FEET_WIDTH * 0.9, BLOBBY.DIMENSIONS.FEET_HEIGHT * 0.9);
    push();
    translate(gameChar.x, gameChar.y - BLOBBY.DIMENSIONS.BODY_HEIGHT / 2 - BLOBBY.DIMENSIONS.FEET_HEIGHT / 2);
    rotate(PI / 12.0);
    fill(BLOBBY.COLORS.BODY);
    ellipse(0, 0, BLOBBY.DIMENSIONS.BODY_WIDTH, BLOBBY.DIMENSIONS.BODY_HEIGHT * 1.05);
    fill(BLOBBY.COLORS.ARM);
    rect(-BLOBBY.DIMENSIONS.BODY_WIDTH * 0.2, -BLOBBY.DIMENSIONS.BODY_HEIGHT * 0.1 + 10, BLOBBY.DIMENSIONS.ARM_LENGTH * 1.2, BLOBBY.DIMENSIONS.ARM_WIDTH, 5);
    noStroke();
    fill(BLOBBY.COLORS.EYE);
    ellipse(BLOBBY.DIMENSIONS.BODY_WIDTH * 0.25, -BLOBBY.DIMENSIONS.BODY_HEIGHT * 0.1, BLOBBY.DIMENSIONS.EYE_SIZE * 1.1, BLOBBY.DIMENSIONS.EYE_SIZE * 1.1);
    fill(BLOBBY.COLORS.PUPIL);
    ellipse(BLOBBY.DIMENSIONS.BODY_WIDTH * 0.25 + 1, -BLOBBY.DIMENSIONS.BODY_HEIGHT * 0.1, BLOBBY.DIMENSIONS.PUPIL_SIZE, BLOBBY.DIMENSIONS.PUPIL_SIZE);
    stroke(BLOBBY.COLORS.PUPIL);
    noFill();
    arc(BLOBBY.DIMENSIONS.BODY_WIDTH * 0.25, -BLOBBY.DIMENSIONS.BODY_HEIGHT * 0.2, BLOBBY.DIMENSIONS.PUPIL_SIZE * 2, BLOBBY.DIMENSIONS.PUPIL_SIZE * 2, BLOBBY.EYEBROW_START, BLOBBY.EYEBROW_STOP);
    noStroke();
    fill(BLOBBY.COLORS.MOUTH);
    ellipse(-BLOBBY.DIMENSIONS.BODY_WIDTH * -0.4, BLOBBY.DIMENSIONS.BODY_HEIGHT * 0.2, 6, 6);
    pop();
}
